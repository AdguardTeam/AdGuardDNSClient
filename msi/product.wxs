<?xml version="1.0" encoding="UTF-8"?>
<!--
  Format XML documents with:
    xmllint -pretty 2
-->
<?include
./info.wxi ?>
<Wix
    xmlns="http://wixtoolset.org/schemas/v4/wxs"
    xmlns:ui="http://wixtoolset.org/schemas/v4/wxs/ui"
  >
  <!--
    Describe a Product, since this is an MSI distribution, see
    https://wixtoolset.org/docs/v3/xsd/wix/product.

    TODO(e.burkov):  Add Platform attribute when
    https://gitlab.gnome.org/GNOME/msitools/-/issues/46 is resolved.
  -->
  <Product
      Id="$(var.ProductCode)"
      UpgradeCode="$(var.UpgradeCode)"
      Name="$(var.ProductName)"
      Version="$(var.ProductVersion)"
      Manufacturer="$(var.Manufacturer)"
      Language="$(var.LanguageCode)"
    >
    <!--
      Describe a package, see https://wixtoolset.org/docs/v3/xsd/wix/package.
      Don't set InstallScope="perMachine" since it causes issues with finding
      installed products on x86.
    -->
    <Package
        Id="$(var.PackageCode)"
        InstallerVersion="500"
        Description="$(var.InstallerDescription)"
        Compressed="yes"
        Keywords="Installer"
        Manufacturer="$(var.Manufacturer)"
        Languages="$(var.LanguageCode)"
    />

    <!--
      TODO(e.burkov):  Add upgrade.
    -->

    <!--
      Describe the disk, see https://wixtoolset.org/docs/v3/xsd/wix/media.
    -->
    <Media
        Id="1"
        Cabinet="media1.cab"
        EmbedCab="yes"
    />

    <!--
      Detect and require admin privileges, see
      https://learn.microsoft.com/en-us/windows/win32/msi/msiuserealadmindetection.
    -->
    <Property
        Id="MSIUSEREALADMINDETECTION"
        Value="1"
    />

    <!--
      Don't check the running app since we handle it with custom actions anyway,
      see https://learn.microsoft.com/en-us/windows/win32/msi/msirestartmanagercontrol.
    -->
    <Property
        Id="MSIRESTARTMANAGERCONTROL"
        Value="Disable"
    />

    <!--
      Use a custom property for the StartSvc custom action condition.
    -->
    <Property
        Id="START_AFTER_INSTALL"
        Value="0"
    />

    <!--
      Determine the path to cmd.exe dynamically.
    -->
    <Property
        Id="CMDPATH"
        Value="cmd.exe"
    />

    <!--
      Use a custom property for the DeleteConfiguration custom action condition.
    -->
    <Property
        Id="DELETE_CONFIGURATION"
        Value="0"
    />

    <!--
      Describe the installed resources layout, see
      https://wixtoolset.org/docs/v3/xsd/wix/directory.
    -->
    <Directory
        Id="TARGETDIR"
        Name="SourceDir"
      >
      <Directory
          Id="$(var.PlatformProgramFilesFolder)"
          Name="PFiles"
        >
        <Directory
            Id="INSTALLDIR"
            Name="AdGuard DNS Client"
          >
          <Component
              Id="MainExecutable"
              Guid="$(var.ExecutableGUID)"
              Win64="$(var.ComponentWin64)"
            >
            <File
                Id="AdGuardDNSClient"
                Name="AdGuardDNSClient.exe"
                DiskId="1"
                Source="$(var.BuildDir)/AdGuardDNSClient.exe"
                KeyPath="yes"
              >
              <!--
                TODO(e.burkov):  Add shortcuts.
              -->
            </File
            >
            <File
                Id="License"
                Name="LICENSE.txt"
                DiskId="1"
                Source="$(var.BuildDir)/LICENSE.txt"
            />
          </Component
          >
        </Directory
        >
      </Directory
      >
    </Directory
    >
    <!--
      Describe the installed units, see
      https://wixtoolset.org/docs/v3/xsd/wix/feature.
    -->
    <Feature
        Id="Complete"
        Title="Complete Install"
        Level="1"
      >
      <ComponentRef
          Id="MainExecutable"
      />
    </Feature
    >

    <!--
      Add custom actions, see
      https://wixtoolset.org/docs/schema/wxs/customaction.
    -->

    <!--
      Install the service and check the result since this is a required step.

      TODO(e.burkov):  Perhaps, it'd be better to use ServiceInstall element.
    -->
    <CustomAction
        Id="InstallSvc"
        Impersonate="no"
        FileKey="AdGuardDNSClient"
        ExeCommand="-s install"
        Execute="deferred"
        Return="check"
    />

    <!--
      Uninstall the service and don't check the result, as this step is for the
      rollback sequence, which should do the least.
    -->
    <CustomAction
        Id="RollbackInstallSvc"
        Impersonate="no"
        FileKey="AdGuardDNSClient"
        ExeCommand="-s uninstall"
        Execute="rollback"
        Return="ignore"
    />

    <!--
      Uninstall the service and don't check the result, as this step is
      performed on uninstall and should not require the service to be installed.
    -->
    <CustomAction
        Id="UninstallSvc"
        Impersonate="no"
        FileKey="AdGuardDNSClient"
        ExeCommand="-s uninstall"
        Execute="deferred"
        Return="ignore"
    />

    <!--
      Set the path to cmd.exe and check the result since it's very unlikely to
      fail.
    -->
    <CustomAction
        Id="SetCMDPATH"
        Impersonate="no"
        Property="CMDPATH"
        Value="[SystemFolder]cmd.exe"
        Execute="immediate"
        Return="check"
    />

    <!--
      Delete the configuration on uninstall if the user wants it, and don't
      check the result, as the actual default filename may be irrelevant.

      TODO(e.burkov):  Add RemoveFile element when
      https://gitlab.gnome.org/GNOME/msitools/-/issues/47 is resolved.
    -->
    <CustomAction
        Id="DeleteConfiguration"
        Impersonate="no"
        Property="CMDPATH"
        ExeCommand="/c &quot; del /q &quot;[INSTALLDIR]config.yaml&quot; &quot;"
        Execute="deferred"
        Return="ignore"
    />

    <!--
      Start the service after install if the user wants it, and check the result
      since the startup actually doesn't return any potential errors unless the
      service is installed.
    -->
    <CustomAction
        Id="StartSvc"
        Impersonate="no"
        FileKey="AdGuardDNSClient"
        ExeCommand="-s start"
        Execute="commit"
        Return="check"
    />

    <!--
      Stop the service and don't check the result, as this step is performed on
      uninstall and should not require the service to be installed.
    -->
    <CustomAction
        Id="StopSvc"
        Impersonate="no"
        FileKey="AdGuardDNSClient"
        ExeCommand="-s stop"
        Execute="deferred"
        Return="ignore"
    />

    <!--
      Define the actions order, see
      https://wixtoolset.org/docs/v3/xsd/wix/installexecutesequence and
      https://learn.microsoft.com/en-us/windows/win32/msi/suggested-installexecutesequence.
    -->
    <InstallExecuteSequence
      >
      <Custom
          Action="StopSvc"
          After="ProcessComponents"
          Before="UninstallSvc"
        >
        REMOVE~="ALL"
      </Custom
      >
      <Custom
          Action="UninstallSvc"
          Before="SetCMDPATH"
        >
        REMOVE~="ALL"
      </Custom
      >
      <Custom
          Action="SetCMDPATH"
          Before="DeleteConfiguration"
        >
        DELETE_CONFIGURATION AND REMOVE~="ALL"
      </Custom
      >
      <Custom
          Action="DeleteConfiguration"
          Before="UnpublishFeatures"
        >
        DELETE_CONFIGURATION AND REMOVE~="ALL"
      </Custom
      >
      <Custom
          Action="InstallSvc"
          After="PublishProduct"
        >
        NOT Installed
      </Custom
      >
      <Custom
          Action="StartSvc"
          After="InstallSvc"
        >
        START_AFTER_INSTALL AND (NOT Installed)
      </Custom
      >
    </InstallExecuteSequence
    >

    <UIRef
        Id="InstallerUI"
    />
  </Product
  >
</Wix
>
